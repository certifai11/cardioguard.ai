# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWl-V191x2oUlfAO91s6MthgNpBo7Bb4
"""

import random
import time
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# User profile (static inputs)
user_profile = {
    "age": 45,            # years
    "weight": 85,         # kg
    "height": 175,        # cm
    "gender": "male",     # male/female/other
    "smoking": True,      # True/False
    "family_history": True # True/False
}

# Simulation parameters
SIM_DURATION_HOURS = 24  # Simulate 24 hours
DATA_POINTS_PER_HOUR = 60  # 1 sample per minute
TOTAL_DATA_POINTS = SIM_DURATION_HOURS * DATA_POINTS_PER_HOUR

# Initialize data storage
data = {
    "time": [],
    "heart_rate": [],
    "hrv_sdnn": [],
    "spo2": [],
    "steps": [],
    "sleep": [],  # 0 = awake, 1 = light, 2 = deep, 3 = REM
    "activity": []  # 0 = resting, 1 = light activity, 2 = vigorous
}

# Simulate wristband data
def simulate_wristband_data():
    current_time = datetime.now()
    steps_total = 0

    for i in range(TOTAL_DATA_POINTS):
        # Time progression (1 minute per data point)
        data["time"].append(current_time + timedelta(minutes=i))

        # Hour of day for activity/sleep patterns
        hour = (i // DATA_POINTS_PER_HOUR) % 24

        # Activity state (simplified day: sleep 0-6, rest 6-18, active 18-22, rest 22-24)
        if 0 <= hour < 6:  # Sleeping
            activity = 0
            sleep_state = random.choice([1, 2, 3])  # Light, deep, REM
            steps = 0
        elif 18 <= hour < 22:  # Active period (e.g., evening walk)
            activity = random.choice([1, 2])  # Light or vigorous
            sleep_state = 0
            steps = random.randint(5, 20) if activity == 1 else random.randint(20, 50)
        else:  # Resting
            activity = 0
            sleep_state = 0
            steps = random.randint(0, 5)  # Minimal movement

        steps_total += steps

        # Heart rate based on activity
        if activity == 0 and sleep_state > 0:  # Sleeping
            hr = random.randint(50, 70)
        elif activity == 0:  # Resting awake
            hr = random.randint(60, 80)
        elif activity == 1:  # Light activity
            hr = random.randint(80, 120)
        else:  # Vigorous activity
            hr = random.randint(120, 160)
        hr += random.randint(-5, 5)  # Add noise

        # HRV (SDNN) - lower during activity, higher during rest/sleep
        hRv = random.randint(20, 60) if activity > 0 else random.randint(40, 100)

        # SpO2 - slight drops during sleep (e.g., apnea simulation)
        spo2 = random.randint(95, 100) if sleep_state == 0 else random.randint(88, 98)

        # Store data
        data["heart_rate"].append(hr)
        data["hrv_sdnn"].append(hRv)
        data["spo2"].append(spo2)
        data["steps"].append(steps)
        data["sleep"].append(sleep_state)
        data["activity"].append(activity)

# Calculate summary statistics
# Calculate summary statistics
def analyze_data():
    # Initialize resting heart rates and a counter for resting periods
    resting_heart_rates = []
    resting_periods = 0

    # Iterate through the data using enumerate to get both the index and value
    for i, (hr, act) in enumerate(zip(data["heart_rate"], data["activity"])):
        # Check if the activity is resting (0) and the sleep state is awake (0)
        if act == 0 and data["sleep"][i] == 0:
            resting_heart_rates.append(hr)  # Add the heart rate to the list
            resting_periods += 1  # Increment the counter

    # Calculate the average resting heart rate if there were resting periods
    avg_rhr = sum(resting_heart_rates) / max(1, resting_periods) if resting_periods else 0
    avg_hrv = sum(data["hrv_sdnn"]) / TOTAL_DATA_POINTS
    avg_spo2 = sum(data["spo2"]) / TOTAL_DATA_POINTS
    total_steps = sum(data["steps"])
    sleep_hours = sum(1 for s in data["sleep"] if s > 0) / DATA_POINTS_PER_HOUR

    return {
        "avg_rhr": avg_rhr,           # Average resting heart rate (bpm)
        "avg_hrv": avg_hrv,           # Average HRV SDNN (ms)
        "avg_spo2": avg_spo2,         # Average SpO2 (%)
        "total_steps": total_steps,   # Total steps in 24h
        "sleep_hours": sleep_hours    # Total sleep hours
    }

# Simple heart disease risk assessment
def assess_risk(stats):
    risk_score = 0
    risk_factors = []

    # Resting HR
    if stats["avg_rhr"] > 80:
        risk_score += 20
        risk_factors.append("High resting heart rate")

    # HRV
    if stats["avg_hrv"] < 30:
        risk_score += 20
        risk_factors.append("Low HRV")

    # SpO2
    if stats["avg_spo2"] < 92:
        risk_score += 20
        risk_factors.append("Low oxygen saturation")

    # Steps
    if stats["total_steps"] < 5000:
        risk_score += 20
        risk_factors.append("Sedentary lifestyle")

    # Sleep
    if stats["sleep_hours"] < 6:
        risk_score += 10
        risk_factors.append("Insufficient sleep")

    # User profile factors
    if user_profile["age"] > 50:
        risk_score += 10
    if user_profile["smoking"]:
        risk_score += 20
        risk_factors.append("Smoking")
    if user_profile["family_history"]:
        risk_score += 20
        risk_factors.append("Family history")

    # Risk level
    if risk_score >= 60:
        risk_level = "High"
    elif risk_score >= 30:
        risk_level = "Moderate"
    else:
        risk_level = "Low"

    return risk_level, risk_score, risk_factors

# Plot data
def plot_data():
    plt.figure(figsize=(12, 8))

    plt.subplot(3, 1, 1)
    plt.plot(data["time"], data["heart_rate"], label="Heart Rate (bpm)")
    plt.ylabel("Heart Rate")
    plt.legend()

    plt.subplot(3, 1, 2)
    plt.plot(data["time"], data["spo2"], label="SpO2 (%)", color="orange")
    plt.ylabel("SpO2")
    plt.legend()

    plt.subplot(3, 1, 3)
    plt.plot(data["time"], data["steps"], label="Steps", color="green")
    plt.ylabel("Steps")
    plt.xlabel("Time")
    plt.legend()

    plt.tight_layout()
    plt.show()

# Run simulation
if __name__ == "__main__":
    print("Starting wristband simulation...")
    simulate_wristband_data()
    stats = analyze_data()

    print("\n--- Simulation Summary ---")
    print(f"Average Resting HR: {stats['avg_rhr']:.1f} bpm")
    print(f"Average HRV (SDNN): {stats['avg_hrv']:.1f} ms")
    print(f"Average SpO2: {stats['avg_spo2']:.1f}%")
    print(f"Total Steps: {stats['total_steps']}")
    print(f"Sleep Duration: {stats['sleep_hours']:.1f} hours")

    risk_level, risk_score, risk_factors = assess_risk(stats)
    print("\n--- Heart Disease Risk Assessment ---")
    print(f"Risk Level: {risk_level}")
    print(f"Risk Score: {risk_score}")
    if risk_factors:
        print("Contributing Factors:", ", ".join(risk_factors))

    print("\nGenerating plots...")
    plot_data()

# prompt: do the above \simulator again  to run every 10 seconds and change the plot\s and output\s accordingly

import random
import time
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import IPython.display

# ... (rest of your code from the previous response)

# Modified main loop for continuous simulation and updating plots
if __name__ == "__main__":
    while True:
        IPython.display.clear_output(wait=True) # Clear the previous output
        print("Starting wristband simulation...")
        # Reset data for each iteration
        data = {
            "time": [],
            "heart_rate": [],
            "hrv_sdnn": [],
            "spo2": [],
            "steps": [],
            "sleep": [],
            "activity": []
        }
        simulate_wristband_data()
        stats = analyze_data()

        print("\n--- Simulation Summary ---")
        print(f"Average Resting HR: {stats['avg_rhr']:.1f} bpm")
        print(f"Average HRV (SDNN): {stats['avg_hrv']:.1f} ms")
        print(f"Average SpO2: {stats['avg_spo2']:.1f}%")
        print(f"Total Steps: {stats['total_steps']}")
        print(f"Sleep Duration: {stats['sleep_hours']:.1f} hours")

        risk_level, risk_score, risk_factors = assess_risk(stats)
        print("\n--- Heart Disease Risk Assessment ---")
        print(f"Risk Level: {risk_level}")
        print(f"Risk Score: {risk_score}")
        if risk_factors:
            print("Contributing Factors:", ", ".join(risk_factors))

        print("\nGenerating plots...")
        plot_data()

        time.sleep(10)  # Wait for 10 seconds

# prompt: Do repeat  above but every time call a n API  with  simulated parameters  passing  as arguments and do the check\s like if HR> 160 warning if le\s\s than 120 Normal and more than 200 High ri\sk to be di\splayed , the program \should di\splay every 10 \sec

import random
import time
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import IPython.display
import gspread
from google.auth import default
from google.colab import auth

# Authenticate to Google Sheets
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

# Open the spreadsheet (create if it doesn't exist)
try:
    sh = gc.open('HeartRateData')
    worksheet = sh.sheet1
except gspread.exceptions.SpreadsheetNotFound:
    sh = gc.create('HeartRateData')
    worksheet = sh.sheet1
    worksheet.append_row(["Timestamp", "Heart Rate", "Risk Level"])  # Add header row

# ... (rest of your code, including functions: simulate_wristband_data, analyze_data, assess_risk, plot_data)


# Modified main loop
# ... (rest of your imports and functions)


import random
import time
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import IPython.display
import gspread
from google.auth import default
from google.colab import auth

# ... (rest of the imports and code)

if __name__ == "__main__":
    # Initialize data outside the loop
    data = {
        "time": [],
        "heart_rate": [],
        "hrv_sdnn": [],
        "spo2": [],
        "steps": [],
        "sleep": [],
        "activity": []
    }

    while True:
        IPython.display.clear_output(wait=True)
        print("Starting wristband simulation...")
        # Clear existing data, but keep the keys
        for key in data:
            data[key] = []

        # Call simulate_wristband_data() before accessing data["heart_rate"]
        simulate_wristband_data() # Call the function to populate data before analyzing it
        # ... (rest of the code inside the loop)
        stats = analyze_data()

        risk_level, risk_score, risk_factors = assess_risk(stats)

        # Get the latest heart rate
        latest_hr = data["heart_rate"][-1]

        # Determine risk level based on heart rate
        risk_text = ""
        if latest_hr > 160:
            risk_text = "Warning"
        elif latest_hr < 120:
            risk_text = "Normal"
        elif latest_hr > 200:
          risk_text = "High Risk"

        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Append data to Google Sheet
        worksheet.append_row([current_time, latest_hr, risk_text])

        print("\n--- Simulation Summary ---")
        # ... (other print statements)
        print(f"Latest Heart Rate: {latest_hr} bpm")
        print(f"Risk Level (based on HR): {risk_text}")

        print("\nGenerating plots...")
        # plot_data()

        # time.sleep(10)